{{#withSeparateModelsAndApi}}
// tslint:disable
import { Observable } from "rxjs";
import { APIHandler, APIURLTypes, HttpOptions{{#operations}}{{#operation}}{{#-first}}{{#authMethods}}{{#isBasic}}, HttpBasicAuth{{/isBasic}}{{#isApiKey}}, ApiKeyAuth{{/isApiKey}}{{#isBasicBearer}}, OAuth{{/isBasicBearer}}{{#isOAuth}}, OAuth{{/isOAuth}}{{/authMethods}}{{/-first}}{{/operation}}{{/operations}} } from "{{apiRelativeToRoot}}base";
import { {{#imports}}{{classname}}{{^-last}}, {{/-last}}{{/imports}} } from "{{apiRelativeToRoot}}{{tsModelPackage}}";
{{/withSeparateModelsAndApi}}

{{#operations}}
export class {{classname}} extends APIHandler {
    static urls: APIURLTypes.{{classname}} = {
        {{#operation}}{{nickname}}: "{{path}}"{{#hasMore}},
        {{/hasMore}}{{/operation}}
    };
    
    constructor() {
        super("{{classname}}");{{#operation}}{{#-first}}{{#authMethods}}
        this.authentications.push({{#isBasic}}new HttpBasicAuth(){{/isBasic}}{{#isApiKey}}new ApiKeyAuth({{#isKeyInHeader}}'header', {{/isKeyInHeader}}{{^isKeyInHeader}}'query', {{/isKeyInHeader}}'{{keyParamName}}'){{/isApiKey}}{{#isBasicBearer}}new OAuth(){{/isBasicBearer}}{{#isOAuth}}new OAuth(){{/isOAuth}});{{/authMethods}}{{/-first}}{{/operation}}
    }
    
{{#operation}}
    {{#-first}}
    {{#authMethods}}
    // authentication {{name}} required
    {{#isApiKey}}
    private _apiKey: string;
    get apiKey() {
        return this._apiKey;
    }
    {{#isKeyInHeader}}
    set apiKey(key: string | Function) {
        const localApiKey: string = typeof key === 'function'
            ? key("{{keyParamName}}")
            : key;
        this._apiKey = localApiKey;
    }
    {{/isKeyInHeader}}
    {{#isKeyInQuery}}
    set apiKey(key: string | Function) {
        const localApiKey: string = typeof key === 'function'
            ? key("{{keyParamName}}")
            : key;
        this._apiKey = localApiKey;
    }
    {{/isKeyInQuery}}
    {{/isApiKey}}
    {{#isBasicBasic}}
    private _username: string;
    get username() {
        return this._username;
    }
    set username(username: string) {
        this._username = username;
    }
    private _password: string;
    get password() {
        return this._password;
    }
    set password(password: string) {
        this._password = password;
    }
    {{/isBasicBasic}}
    {{#isBasicBearer}}
    private _accessToken: string;
    get accessToken() {
        return this._accessToken;
    }
    // http bearer authentication required
    set accessToken(accessToken: string | Function) {
        const bearerToken: string = typeof accessToken === 'function'
            ? accessToken()
            : accessToken;
        this._accessToken = bearerToken;
    }
    {{/isBasicBearer}}
    {{#isOAuth}}
    private _accessToken: string;
    get accessToken() {
        return this._accessToken;
    }
    set accessToken(token: string) {
        this._accessToken = token;
    }
    {{/isOAuth}}
    {{/authMethods}}
    {{/-first}}
    /**{{#summary}}
     * {{summary}}{{/summary}}{{#notes}}
     * {{notes}}{{/notes}}{{#allParams}}
     * @param {{paramName}} {{description}}{{/allParams}}
     */
    public {{nickname}}(params: {
        {{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{^isPrimitiveType}}{{^isFile}}{{/isFile}}{{/isPrimitiveType}}{{{dataType}}};{{#hasMore}}
        {{/hasMore}}{{/allParams}}
    }{{^hasRequiredParams}} = {}{{/hasRequiredParams}}, options?: HttpOptions): Observable<{{#imports}}{{#.}}{{.}}{{^-last}} | {{/-last}}{{/.}}{{/imports}}> {
        const acceptTypes: Array<string> = [{{#produces}}"{{mediaType}}"{{#hasMore}}, {{/hasMore}}{{/produces}}];
        this.initAuth({{#hasAuthMethods}}{{#cookieAuth}}false{{/cookieAuth}}{{#authMethods}}true, {{#isApiKey}}{{#isKeyInHeader}}{ token: this.apiKey as string, contentTypes: acceptTypes, key: "Authentication" }{{/isKeyInHeader}}{{/isApiKey}}{{#isBasicBasic}}{ username: this.username, password: this.password, key: "Basic" }{{/isBasicBasic}}{{#isBasicBearer}}{ token: this.accessToken, contentTypes: acceptTypes, key: "Authentication" } {{/isBasicBearer}}{{#isOAuth}}{ token: this.accessToken, contentTypes: acceptTypes, key: "Authentication" }{{/isOAuth}}{{/authMethods}}{{/hasAuthMethods}}{{^hasAuthMethods}}false{{/hasAuthMethods}});
        const apiURL: string = this.initAPIURL({{classname}}.urls.{{nickname}}{{#hasPathParams}}, { {{/hasPathParams}}{{#pathParams}}{{baseName}}: params.{{paramName}}{{#hasMore}}, {{/hasMore}}{{/pathParams}}{{#hasPathParams}} } {{/hasPathParams}}{{^pathParams}}, null{{/pathParams}});
        options = this.initOptions(options, { {{#queryParams}}{{paramName}}: params.{{paramName}}{{#hasMore}}, {{/hasMore}}{{/queryParams}} }, { {{#headerParams}}{{paramName}}: params.{{paramName}}{{#hasMore}}, {{/hasMore}}{{/headerParams}} });{{#formParams}}{{#isFile}}
        const formData: FormData = new FormData();
        formData.append("file", params.{{paramName}} as any);{{/isFile}}{{/formParams}}
        const body: any = {{#formParams}}{{#-first}}{ {{/-first}}{{#isFile}}formData{{/isFile}}{{^isFile}}{{paramName}}: params.{{paramName}}{{/isFile}}{{#-last}} }{{/-last}}{{^-last}}, {{/-last}}{{/formParams}}{{^formParams}}{{#bodyParam}}params.{{paramName}}{{/bodyParam}}{{/formParams}}{{^formParams}}{{^bodyParam}}null{{/bodyParam}}{{/formParams}};
        return this.makeCall<{{#imports}}{{#.}}{{.}}{{^-last}} | {{/-last}}{{/.}}{{/imports}}>("{{httpMethod}}".toLowerCase(), apiURL, options, body);
    }

{{/operation}}
}
{{/operations}}