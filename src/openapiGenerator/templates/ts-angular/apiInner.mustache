{{#withSeparateModelsAndApi}}
// tslint:disable
import { Observable } from "rxjs";
import { APIHandler, APIURLTypes, HttpOptions } from "{{apiRelativeToRoot}}base";
import { {{#imports}}{{classname}}{{^-last}}, {{/-last}}{{/imports}} } from "{{apiRelativeToRoot}}{{tsModelPackage}}";
{{/withSeparateModelsAndApi}}

{{#operations}}
export class {{classname}} extends APIHandler {
    static urls: APIURLTypes.{{classname}} = {
        {{#operation}}{{nickname}}: "{{path}}"{{#hasMore}},
        {{/hasMore}}{{/operation}}
    };
    
    constructor() {
        super("{{classname}}");
    }
    
{{#operation}}
    /**{{#summary}}
     * {{summary}}{{/summary}}{{#notes}}
     * {{notes}}{{/notes}}{{#allParams}}
     * @param {{paramName}} {{description}}{{/allParams}}
     */
    public {{nickname}}(params: {
        {{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{^isPrimitiveType}}{{^isFile}}{{/isFile}}{{/isPrimitiveType}}{{{dataType}}};{{#hasMore}}
        {{/hasMore}}{{/allParams}}
    }{{^hasRequiredParams}} = {}{{/hasRequiredParams}}, options: HttpOptions = {}): Observable<{{#imports}}{{#.}}{{.}}{{^-last}} | {{/-last}}{{/.}}{{/imports}}{{^imports}}any{{/imports}}> {
        const apiURL: string = this.initAPIURL({{classname}}.urls.{{nickname}}{{#hasPathParams}}, { {{/hasPathParams}}{{#pathParams}}{{baseName}}: params.{{paramName}}{{#hasMore}}, {{/hasMore}}{{/pathParams}}{{#hasPathParams}} } {{/hasPathParams}}{{^pathParams}}, null{{/pathParams}});
        options = this.initOptions(options, { {{#queryParams}}{{paramName}}: params.{{paramName}}{{#hasMore}}, {{/hasMore}}{{/queryParams}} }, { {{#headerParams}}{{paramName}}: params.{{paramName}}{{#hasMore}}, {{/hasMore}}{{/headerParams}} });{{#formParams}}{{#isFile}}
        const formData: FormData = new FormData();
        formData.append("file", params.{{paramName}} as any);{{/isFile}}{{/formParams}}
        const body: any = {{#formParams}}{{#-first}}{ {{/-first}}{{#isFile}}formData{{/isFile}}{{^isFile}}{{paramName}}: params.{{paramName}}{{/isFile}}{{#-last}} }{{/-last}}{{^-last}}, {{/-last}}{{/formParams}}{{^formParams}}{{#bodyParam}}params.{{paramName}}{{/bodyParam}}{{/formParams}}{{^formParams}}{{^bodyParam}}null{{/bodyParam}}{{/formParams}};
        return this.makeCall<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}any{{/returnType}}>("{{httpMethod}}".toLowerCase(), apiURL, "{{nickname}}", options, body);
    }

{{/operation}}
}
{{/operations}}